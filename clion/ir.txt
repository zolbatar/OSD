** GLOBAL **
[Variable] Local create integer (0)
[Variable] Local create integer (1)
[Variable] Local create integer (2)
[Stack   ] Literal integer 1
[Variable] Store integer (0)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 100
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Maths   ] -, integer
[Variable] Store integer (1)
[Stack   ] Literal integer 1
[Variable] Store integer (2)
[Branch  ] Jump create: (0)
[Proc    ] PROC call: (0/GraphicsSingle)
[General ] Yield
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Variable] Load integer (0)
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Maths   ] +, integer
[Variable] Store integer (0)
[Stack   ] Literal integer 1
[Stack   ] Push integer Operand1
[Variable] Load integer (1)
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Maths   ] -, integer
[Variable] Store integer (1)
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Variable] Load integer (1)
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Variable] Compare >= integer
[Branch  ] Jump on true: (0)

** PROCs **
[Proc    ] PROC start: (0/GraphicsSingle)
[Variable] Local create integer (0)
[Variable] Local create integer (1)
[Variable] Local create integer (2)
[Variable] Local create integer (3)
[Variable] Local create integer (4)
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb15c0/'COLOURBG')
[Func    ] Call function: (0x103eb14f0/'CLS')
[Argument] Return type is integer
[Func    ] Call function: (0x103eb13d0/'SCREENWIDTH')
[Stack   ] Pop integer to Operand1
[Variable] Store integer (0)
[Argument] Return type is integer
[Func    ] Call function: (0x103eb1460/'SCREENHEIGHT')
[Stack   ] Pop integer to Operand1
[Variable] Store integer (1)
[Stack   ] Literal integer 1
[Variable] Store integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 50
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Maths   ] -, integer
[Variable] Store integer (3)
[Stack   ] Literal integer 1
[Variable] Store integer (4)
[Branch  ] Jump create: (1)
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb1530/'COLOUR')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb1530/'COLOUR')
[Stack   ] Literal integer 35
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 30
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 20
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 20
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 10
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 10
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb1750/'TRIANGLE')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Return type is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb22d0/'RND')
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is integer
[Func    ] Call function: (0x103eb1530/'COLOUR')
[Variable] Load integer (4)
[Stack   ] Push integer Operand1
[Variable] Load integer (2)
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Maths   ] +, integer
[Variable] Store integer (2)
[Stack   ] Literal integer 1
[Stack   ] Push integer Operand1
[Variable] Load integer (3)
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Maths   ] -, integer
[Variable] Store integer (3)
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Variable] Load integer (3)
[Operand ] Integer operand 1 to 2
[Stack   ] Pop integer to Operand1
[Variable] Compare >= integer
[Branch  ] Jump on true: (1)
[Proc    ] Return none, final:1
[Proc    ] PROC end: (0)
