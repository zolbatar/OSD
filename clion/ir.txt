** GLOBAL **
[Proc    ] PROC call: (0/Clock)

** PROCs **
[Proc    ] PROC start: (0/Clock)
[Variable] Local create integer (0)
[Variable] Local create integer (1)
[Variable] Local create integer (2)
[Variable] Local create integer (3)
[Variable] Local create integer (4)
[Variable] Local create integer (5)
[Variable] Local create float (6)
[Variable] Local create integer (7)
[Variable] Local create integer (8)
[Stack   ] Literal integer 4
[Variable] Store integer (0)
[Stack   ] Literal integer 20
[Variable] Store integer (1)
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 255
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ad00)
[Branch  ] Jump create: (0)
[Func    ] Call function: (0x10e70ac50)
[Argument] Return type is integer
[Func    ] Call function: (0x10e70abb0)
[Stack   ] Pop integer to Operand1
[Variable] Store integer (2)
[Argument] Return type is integer
[Func    ] Call function: (0x10e70ac00)
[Stack   ] Pop integer to Operand1
[Variable] Store integer (3)
[Argument] Return type is string
[Func    ] Call function: (0x10e70a920)
[Stack   ] Literal integer 23
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Argument] Parameter is integer
[Argument] Parameter is string
[Strings ] MID$
[Stack   ] Push string Operand1
[Stack   ] Pop string Operand1
[Convert ] Operand1, string to integer
[Variable] Store integer (4)
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal float 0.450000
[Operand ] Float operand 1 to 2
[Stack   ] Pop integer to Operand1
[Convert ] Operand1, integer to float
[Stack   ] Push float Operand1
[Operand ] Float operand 2 to 1
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (5)
[Stack   ] Literal integer 180
[Stack   ] Push integer Operand1
[Variable] Load integer (4)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 6
[Stack   ] Pop integer to Operand2
[Maths   ] *, integer
[Stack   ] Pop integer to Operand2
[Maths   ] -, integer
[Convert ] Operand1, integer to float
[Variable] Store float (6)
[Variable] Load float (6)
[Maths   ] RAD, float
[Maths   ] SIN, float
[Stack   ] Push float Operand1
[Variable] Load integer (5)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (7)
[Variable] Load float (6)
[Maths   ] RAD, float
[Maths   ] COS, float
[Stack   ] Push float Operand1
[Variable] Load integer (5)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (8)
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 0
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ac70)
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Stack   ] Push float Operand1
[Variable] Load integer (8)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] +, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Stack   ] Push float Operand1
[Variable] Load integer (7)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] +, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ae00)
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal float 0.375000
[Operand ] Float operand 1 to 2
[Stack   ] Pop integer to Operand1
[Convert ] Operand1, integer to float
[Stack   ] Push float Operand1
[Operand ] Float operand 2 to 1
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (5)
[Stack   ] Literal integer 180
[Stack   ] Push integer Operand1
[Variable] Load integer (1)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 6
[Stack   ] Pop integer to Operand2
[Maths   ] *, integer
[Stack   ] Pop integer to Operand2
[Maths   ] -, integer
[Convert ] Operand1, integer to float
[Variable] Store float (6)
[Variable] Load float (6)
[Maths   ] RAD, float
[Maths   ] SIN, float
[Stack   ] Push float Operand1
[Variable] Load integer (5)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (7)
[Variable] Load float (6)
[Maths   ] RAD, float
[Maths   ] COS, float
[Stack   ] Push float Operand1
[Variable] Load integer (5)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (8)
[Stack   ] Literal integer 60
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 60
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 60
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ac70)
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Stack   ] Push float Operand1
[Variable] Load integer (8)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] +, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Stack   ] Push float Operand1
[Variable] Load integer (7)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] +, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ae00)
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal float 0.200000
[Operand ] Float operand 1 to 2
[Stack   ] Pop integer to Operand1
[Convert ] Operand1, integer to float
[Stack   ] Push float Operand1
[Operand ] Float operand 2 to 1
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (5)
[Stack   ] Literal integer 180
[Stack   ] Push integer Operand1
[Variable] Load integer (0)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 6
[Stack   ] Pop integer to Operand2
[Maths   ] *, integer
[Stack   ] Pop integer to Operand2
[Maths   ] -, integer
[Convert ] Operand1, integer to float
[Variable] Store float (6)
[Variable] Load float (6)
[Maths   ] RAD, float
[Maths   ] SIN, float
[Stack   ] Push float Operand1
[Variable] Load integer (5)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (7)
[Variable] Load float (6)
[Maths   ] RAD, float
[Maths   ] COS, float
[Stack   ] Push float Operand1
[Variable] Load integer (5)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] *, float
[Convert ] Operand1, float to integer
[Variable] Store integer (8)
[Stack   ] Literal integer 120
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 120
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Stack   ] Literal integer 120
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ac70)
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Stack   ] Push float Operand1
[Variable] Load integer (8)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] +, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Stack   ] Push float Operand1
[Variable] Load integer (7)
[Convert ] Operand1, integer to float
[Stack   ] Pop float to Operand2
[Maths   ] +, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (3)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Variable] Load integer (2)
[Stack   ] Push integer Operand1
[Stack   ] Literal integer 2
[Stack   ] Pop integer to Operand2
[Convert ] Operand1, integer to float
[Convert ] Operand2, integer to float
[Maths   ] /, float
[Convert ] Operand1, float to integer
[Stack   ] Push integer Operand1
[Argument] Parameter is integer
[Func    ] Call function: (0x10e70ae00)
[General ] Yield
[Stack   ] Literal integer 0
[Branch  ] Jump on false: (0)
[Proc    ] Return none, final:1
[Proc    ] PROC end: (0)
